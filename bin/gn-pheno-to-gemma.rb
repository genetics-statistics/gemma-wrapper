#!/usr/bin/env ruby
#
# This code takes a JSON GN trait input and writes out a GEMMA pheno
# column using the JSON output that is generated by gn-geno-to-gemma.
#
# Run it with
#
#   curl http://127.0.0.1:8091/dataset/bxd-publish/values/41022003.json > 41022003-pheno.json
#   gn-pheno-to-gemma.rb --phenotypes 41022003-pheno.json --geno-json BXD.geno.json > BXD_pheno.txt
#
# Note that gn-pheno-to-gemma is no longer needed as gemma-wrapper does the same thing to store trait
# data also in lmdb. Until we have millions of trait values this should be fine.
#
# Pjotr Prins (c) 2025

require 'optparse'

options = { show_help: false }

opts = OptionParser.new do |o|
  o.banner = "\nUsage: #{File.basename($0)} [options]"

  o.on('-p','--phenotypes FILEN', 'Phenotypes') do |phenotypes|
    options[:phenotypes] = phenotypes
    raise "Phenotype input file #{phenotypes} does not exist" if !File.exist?(phenotypes)
  end

  o.on('--geno-json FILEN','JSON file generated by gn-geno-to-gemma') do |filen|
    options[:geno_json] = filen
    raise "JSON input file #{filen} does not exist" if !File.exist?(filen)
  end

  # o.on("-v", "--verbose", "Run verbosely") do |v|
  #   options[:verbose] = true
  # end

  # o.on("-d", "--debug", "Show debug messages and keep intermediate output") do |v|
  #   options[:debug] = true
  # end

  o.separator ""

  o.on_tail('-h', '--help', 'display this help and exit') do
    options[:show_help] = true
  end
end

opts.parse!(ARGV)

if options[:show_help]
  print opts
  # print USAGE
  exit 1
end

require 'json'

pheno = JSON.parse(File.read(options[:phenotypes]))
geno = JSON.parse(File.read(options[:geno_json]))

raise "Geno JSON appears to be wrong" if geno["type"] != "gn-geno-to-gemma"

geno["samples"].each do | ind |
  value = pheno[ind]
  value = "NA" if !value
  print "#{ind}\t#{value}\n"
end
