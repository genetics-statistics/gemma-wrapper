#!/usr/bin/env ruby
#
# To run this you'll need to do:
#
#   env GEM_PATH=tmp/ruby GEM_HOME=tmp/ruby gem install lmdb
#   env GEM_PATH=tmp/ruby GEM_HOME=tmp/ruby ruby -e "require 'lmdb'"
#
# until I fixed the package.
#
# Pjotr Prins (c) 2025

require 'tmpdir'
require 'json'
require 'lmdb'
require 'optparse'

options = { show_help: false }

opts = OptionParser.new do |o|
  o.banner = "\nUsage: #{File.basename($0)} [options] filename(s)"

  # o.on('-p','--phenotypes FILEN', 'Phenotypes') do |phenotypes|
  #   options[:phenotypes] = phenotypes
  #   raise "Phenotype input file #{phenotypes} does not exist" if !File.exist?(phenotypes)
  # end

  # o.on('--geno-json FILEN','JSON file generated by gn-geno-to-gemma') do |filen|
  #   options[:geno_json] = filen
  #   raise "JSON input file #{filen} does not exist" if !File.exist?(filen)
  # end

  # o.on("-v", "--verbose", "Run verbosely") do |v|
  #   options[:verbose] = true
  # end

  # o.on("-d", "--debug", "Show debug messages and keep intermediate output") do |v|
  #   options[:debug] = true
  # end

  o.separator ""

  o.on_tail('-h', '--help', 'display this help and exit') do
    options[:show_help] = true
  end
end

opts.parse!(ARGV)

if options[:show_help]
  print opts
  # print USAGE
  exit 1
end

ARGV.each do |fn|
  Dir.mktmpdir do |tmpdir|
    $stderr.print("Parsing #{fn}...\n")
    if fn =~ /xz$/
      $stderr.print `tar xvJf #{fn} -C #{tmpdir} > /dev/null`
    else
      raise "Expected xz tarball!"
    end
    Dir.glob(tmpdir+"/*.mdb").each do |mdb|
      $stderr.print("lmdb #{mdb}...\n")
      env = LMDB.new(mdb,nosubdir: true)
      maindb = env.database
      db = env.database(File.basename(mdb))

      print(db['meta'])
      env.transaction do

      end

      env.close
    end
  end
end # tmpdir
